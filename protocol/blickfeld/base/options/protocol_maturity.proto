// Copyright (c) 2022 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/options/access_control.proto";
import "google/protobuf/descriptor.proto";
// Options are not namespaced
package blickfeld.base;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_PUBLIC
};

// This message specifies the maturity of a protocol for customer- and production-facing APIs.
message ProtocolMaturity {
  // This enumeration describes the maturity of a protocol.
  // Please refer to the individual values.
  // 
  // [IMPORTANT]
  // APIs marked with the EXPERIMENTAL and DEPRECATED flags have to be handled with care.
  // Please read through the definition.
  // 
  // Please report if the protocol maturity of a service, method, and field does not fit
  // e.g. if an EXPERIMENTAL field is required in an application and production use case.
  enum Level {
    // Level is not set.
    // Default level for services is EXPERIMENTAL.
    // Default level for methods and fields is INHERITED.
    LEVEL_UNSPECIFIED = 0;
    // APIs marked with this flag should be handled with care.
    // They might not function as expected.
    // Additionally it is not ensured that the APIs will ever be moved to the MAINTAINED level.
    // They might be altered or removed in any upcoming release without further notice.
    LEVEL_EXPERIMENTAL = 1;
    // APIs marked with this flag are actively maintained and released.
    // They will not change their behavior without notices in the changelog.
    // Breaking changes in a maintained APIs have to result in a major update of the module.
    LEVEL_MAINTAINED = 2;
    // APIs marked with this flag are no longer actively maintained.
    // They will be removed in upcoming releases.
    LEVEL_DEPRECATED = 3;
    // The protocol maturity is inherited from the parent
    LEVEL_INHERITED = 4;
  }
  // Simple level which describes maturity
  .blickfeld.base.ProtocolMaturity.Level level = 1;
}

extend .google.protobuf.ServiceOptions {
  // Mark service with protocol maturity
  // 
  // Usage:
  // service Example {
  //     (protocol_maturity_service).level = LEVEL_MAINTAINED;
  //     ...
  .blickfeld.base.ProtocolMaturity protocol_maturity_service = 52200 [json_name = "protocolMaturityService"];
}

extend .google.protobuf.MethodOptions {
  // Mark method with protocol maturity
  // 
  // Usage:
  // service Example {
  //     ...
  //     rpc Method(ExampleMethodRequest) returns (ExampleMethodResponse) {
  //         (protocol_maturity_method).level = LEVEL_EXPERIMENTAL;
  //         ...
  .blickfeld.base.ProtocolMaturity protocol_maturity_method = 52200 [json_name = "protocolMaturityMethod"];
}

extend .google.protobuf.FieldOptions {
  // Mark field in request/response with protocol maturity
  // 
  // Usage:
  // message ExampleMethodRequest {
  //     bool enable_over_clocking = 1 [(protocol_maturity_field).level = LEVEL_EXPERIMENTAL];
  //     ...
  .blickfeld.base.ProtocolMaturity protocol_maturity_field = 52200 [json_name = "protocolMaturityField"];
}

