syntax = "proto3";

import "blickfeld/base/data/health.proto";
import "blickfeld/base/options.proto";
package blickfeld.compute_module.data;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// Describes the health of the compute module
message Health {
  // Error flags
  message ErrorFlags {
    // The average CPU load of sensor is too high.
    // The processing and frame rate will be automatically throttled.
    bool high_cpu_load = 1;
    // The temperature of the device is too high.
    // The CPU frequency will be throttled automatically.
    // The processing capability might be limited.
    // Note that an operation outside of the specified temperature range,
    // can cause permanent damage to the sensor.
    bool high_temperature = 2;
  }
  // Performance statistics of the CPU
  message CpuPerformance {
    // Average CPU load of all cores.
    // The value range is between 0 and 1.
    float total_load = 1 [(.blickfeld.base.lifetime_diagnostics) = {
      type: TYPE_UTILIZATION
    }];
    // Individual load per core.
    // The value range is between 0 and 1.
    repeated float individual_loads = 2;
    // Current frequency
    float frequency = 3 [(.blickfeld.base.unit) = "Hz"];
    // Current temperature
    float temperature = 4 [(.blickfeld.base.unit) = "\302\260C", (.blickfeld.base.lifetime_diagnostics) = {
      type: TYPE_TEMPERATURE
    }];
  }
  // Uptime of the device
  message Uptime {
    // Uptime since the last boot
    uint64 since_boot = 1 [(.blickfeld.base.unit) = "s"];
    // Uptime over the whole lifetime.
    // NOTE: The counting started with the firmware v2.3.
    uint64 lifetime = 2 [(.blickfeld.base.unit) = "s"];
  }
  // High-level state of module
  .blickfeld.base.data.Health.State state = 1;
  // Reason for given state. Is not set if state is STATE_OK.
  string state_reason = 2;
  // Error flags
  .blickfeld.compute_module.data.Health.ErrorFlags error_flags = 3;
  // CPU performance
  .blickfeld.compute_module.data.Health.CpuPerformance cpu_performance = 4;
  // Memory utilization of the compute module.
  // The value range is between 0 and 1.
  float memory_utilization = 5 [(.blickfeld.base.lifetime_diagnostics) = {
    type: TYPE_UTILIZATION
  }];
  // Uptime
  .blickfeld.compute_module.data.Health.Uptime uptime = 6;
}

