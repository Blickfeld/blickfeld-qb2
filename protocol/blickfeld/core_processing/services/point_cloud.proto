syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/core_processing/config/demo_recording.proto";
import "blickfeld/core_processing/data/frame.proto";
import "google/protobuf/empty.proto";
package blickfeld.core_processing.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_PUBLIC
};

// Stream response to point cloud stream request
message PointCloudStreamResponse {
  // Point cloud frame
  .blickfeld.core_processing.data.Frame frame = 1;
}

// Response to point cloud get request
message PointCloudGetResponse {
  // Point cloud frame
  .blickfeld.core_processing.data.Frame frame = 1;
}

// Response to point cloud enable demo request
message PointCloudEnableDemoRequest {
  // Select demo recording
  .blickfeld.core_processing.config.DemoRecording recording = 1;
  reserved 2;
  reserved "dump_fn";
}

// Point Cloud service for core point cloud stream.
// It is the direct result of the internal processing pipeline.
// The output is not post-processed further.
// The post-processed output can be retrieved from the percept-processing PointCloud service.
service PointCloud {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_PUBLIC
  };
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_MAINTAINED
  };
  // Stream a point cloud stream
  // NOTE: This activates the sensor if it is currently idle.
  rpc Stream(.google.protobuf.Empty) returns (stream .blickfeld.core_processing.services.PointCloudStreamResponse);
  // Get a single point cloud
  // NOTE: This activates the sensor if it is currently idle.
  rpc Get(.google.protobuf.Empty) returns (.blickfeld.core_processing.services.PointCloudGetResponse);
  // Enable demo data set
  // It will be re-played on Stream requests
  rpc EnableDemo(.blickfeld.core_processing.services.PointCloudEnableDemoRequest) returns (.google.protobuf.Empty);
}

