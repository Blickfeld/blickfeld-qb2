syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/core_processing/config/point_cloud.proto";
import "blickfeld/core_processing/data/frame.proto";
import "google/protobuf/empty.proto";
package blickfeld.core_processing.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// Request for point cloud stream request
message PointCloudStreamRequest {
}

// Request for point cloud get request
message PointCloudGetRequest {
}

// Stream response to point cloud stream request
message PointCloudStreamResponse {
  // Point cloud frame
  .blickfeld.core_processing.data.Frame frame = 1;
}

// Response to point cloud get request
message PointCloudGetResponse {
  // Point cloud frame
  .blickfeld.core_processing.data.Frame frame = 1;
}

// Request for setting the filter configuration
message PointCloudSetFilterRequest {
  // Filter configuration which should be applied on the point cloud frames.
  .blickfeld.core_processing.config.PointCloud.Filter filter = 1;
}

// Response for retrieving the current filter configuration
message PointCloudGetFilterResponse {
  // Filter configuration which is currently applied on the point cloud frames.
  .blickfeld.core_processing.config.PointCloud.Filter filter = 1;
}

// Point Cloud service for core point cloud stream.
// It is the direct result of the internal processing pipeline.
// The output is not post-processed further.
// The post-processed output can be retrieved from the percept-processing PointCloud service.
service PointCloud {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_AUTHORIZED
  };
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_MAINTAINED
  };
  // Stream a point cloud stream
  // NOTE: This activates the sensor if it is currently idle.
  rpc Stream(.blickfeld.core_processing.services.PointCloudStreamRequest) returns (stream .blickfeld.core_processing.services.PointCloudStreamResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
  // Get a single point cloud
  // NOTE: This activates the sensor if it is currently idle.
  rpc Get(.blickfeld.core_processing.services.PointCloudGetRequest) returns (.blickfeld.core_processing.services.PointCloudGetResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
  // Set the filter configuration which is to be applied on the point cloud data
  rpc SetFilter(.blickfeld.core_processing.services.PointCloudSetFilterRequest) returns (.google.protobuf.Empty);
  // Get the filter configuration which is currently applied on the point cloud data
  rpc GetFilter(.google.protobuf.Empty) returns (.blickfeld.core_processing.services.PointCloudGetFilterResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
}

