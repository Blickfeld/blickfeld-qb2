syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/diagnostics/config/log.proto";
package blickfeld.diagnostics.data;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// This message aggregates the data structures related to the log service.
message Log {
  // The log entry contains the message and metadata of a log.
  message Entry {
    // The cursor uniquely identifies a log entry in the logs.
    message Cursor {
      // The sequence number ID is used to reference a set of log entries generated by the same systemd-journald instance.
      string sequence_number_id = 1;
      // The sequence number is assigned to a log entry by the systemd-journald instance when they are written to disk.
      // Every instance numbers their entries sequentially, starting from 1 for the first entry written after subsystem
      // initialization.
      uint64 sequence_number = 2;
    }
    // The log level represents the priority of the log.
    enum Level {
      // No level is set
      LEVEL_UNSPECIFIED = 0;
      // An error condition was detected
      // 
      // Includes the systemd levels: EMERGENCY, ALERT, CRITICAL, ERROR
      LEVEL_ERROR = 1;
      // The message indicates that an error will occur if no action is taken
      // 
      // Includes the systemd levels: NOTICE, WARNING
      LEVEL_WARNING = 2;
      // Normal operational messages that require no action
      // 
      // Includes the systemd levels: INFORMATIONAL
      LEVEL_INFO = 3;
    }
    // UUID of the boot during which the log was written.
    string boot_uuid = 1;
    // Cursor used to index log entries and to navigate through the logs.
    .blickfeld.diagnostics.data.Log.Entry.Cursor cursor = 2;
    // The wallclock time at the point in time the entry was received by the journal, in nanoseconds since the epoch UTC.
    uint64 timestamp = 3 [(.blickfeld.base.unit) = "ns"];
    // The module which has written the log.
    .blickfeld.diagnostics.config.Log.Filter.SoftwareModule module = 4;
    // The log level of the log.
    .blickfeld.diagnostics.data.Log.Entry.Level level = 5;
    // The message which has been logged.
    string message = 6;
  }
}

