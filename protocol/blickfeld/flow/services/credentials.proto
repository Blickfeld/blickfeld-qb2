syntax = "proto3";

import "blickfeld/base/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
package blickfeld.flow.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// Credentials set request
message CredentialsSetRequest {
  // Credentials which should be stored
  // 
  // Generic JSON format which is defined by NodeRed.
  .google.protobuf.Struct credentials = 1;
}

// Credentails get response
message CredentialsGetResponse {
  // Current credentials
  // 
  // Generic JSON format which is defined by NodeRed.
  .google.protobuf.Struct credentials = 1;
}

// Service to store the NodeRed credentials.
// 
// It is used to implement the custom storage API: https://nodered.org/docs/api/storage/
service Credentials {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_AUTHORIZED
  };
  // Set credentials
  // 
  // Used by https://nodered.org/docs/api/storage/methods/#storagesavecredentialscredentials
  rpc Set(.blickfeld.flow.services.CredentialsSetRequest) returns (.google.protobuf.Empty);
  // Get credentials
  // 
  // Used by https://nodered.org/docs/api/storage/methods/#storagegetcredentials
  rpc Get(.google.protobuf.Empty) returns (.blickfeld.flow.services.CredentialsGetResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
}

