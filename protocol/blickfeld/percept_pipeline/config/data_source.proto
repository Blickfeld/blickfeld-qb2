// Copyright (c) 2022 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/config/geolocation.proto";
import "blickfeld/base/geometry/transform.proto";
import "blickfeld/base/options.proto";
import "google/protobuf/struct.proto";
package blickfeld.percept_pipeline.config;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// The configuration storing the sources to retrieve the point cloud data for further processing.
message DataSource {
  // Configuration for retrieving point clouds from a Qb2
  message Qb2 {
    // The fully qualified domain name of the Qb2 device. For on-device processing/configuration, 'fqdn' can be set
    // to an empty string to request the data of the current device.
    string fqdn = 1;
    // The gRPC port of the Qb2 device. If unset the default gRPC ports 50051 (unencrypted) or 55551 (TLS) will be used.
    uint32 port = 5 [(.blickfeld.base.optional) = true];
    // Transformation from the lidar frame to the map frame. If this transform is not set, this will be interpreted as identify
    // transformation. Transforming all point cloud topics into the map frame results in a globally consistent combined point cloud in
    // map frame.
    .blickfeld.base.geometry.Transform map_from_lidar = 2;
    // Application key with authorized access level. If set, the field serial_number has to be set as well.
    // This field is required if user-management is enabled on externally connected devices.
    string application_key = 3 [(.blickfeld.base.optional) = true];
    // Serial number. If set, the connection will be secured with TLS. This field is required if user-management
    // is enabled on externally connected devices.
    string serial_number = 4 [(.blickfeld.base.optional) = true];
    // Disable fetching data from this sensor, setting this flag to `true` disables the evaluation of the entire sensor point cloud
    bool disabled = 6;
    // Arbitrary metadata storage for client applications
    .google.protobuf.Struct metadata = 100 [(.blickfeld.base.optional) = true];
  }
  // Configuration of Trigger Mode. In trigger mode the processing pipeline will reduce the frequency at which
  // point clouds and state lists are getting computed to reduce the amount of data transmitted between the processing
  // device and configured 'lidars'.
  message Trigger {
    // The frequency at which data is getting requested from the lidars and outputs are generated.
    float frequency = 1 [(.blickfeld.base.unit) = "Hz"];
  }
  // The configuration of a Qb2 setup of the LiDAR devices
  message Qb2Setup {
    // the qb2 lidars to get the point clouds from
    repeated .blickfeld.percept_pipeline.config.DataSource.Qb2 lidars = 1;
    // If the field is set trigger mode is enabled. If the field is not set, the pipeline outputs are computed
    // with the frequency of configured lidars, i.e. the scan pattern configured on those.
    .blickfeld.percept_pipeline.config.DataSource.Trigger trigger = 2 [(.blickfeld.base.optional) = true];
  }
  oneof data_source_type {
    // Use Qb2 lidars to retrieve point clouds
    .blickfeld.percept_pipeline.config.DataSource.Qb2Setup qb2_setup = 3;
  }
  // Geolocation of data source.
  // This references the map coordinate system of this data source to the world.
  // Individual lidars are referenced to the map coordinate system via their `map_from_lidar` transform.
  // 
  // [NOTE]
  // If the map_from_lidar transform is not an identity transformation, this is not the geolocation of an individual sensor.
  .blickfeld.base.config.Geolocation geolocation_of_map = 4 [(.blickfeld.base.optional) = true];
  // Experimental mode which enables configuration synchronization and distributed processing.
  // 
  // All processing-related configuration, e.g. scan pattern and zones, are automatically
  // synchronized between all members in the sensor setup.
  // Also the sensor setup itself is replicated on all sensors.
  // 
  // The object lists of all sensors are fused and tracked on every member in the swarm.
  // Thus, also all object-based security zones are evaluated on every sensor.
  // This leads to a high availablity and redundancy without requiring a master processing
  // unit would be a single point of failure.
  bool swarm = 5 [(.blickfeld.base.protocol_maturity_field) = {
    level: LEVEL_EXPERIMENTAL
  }];
  reserved 1, 2;
}

