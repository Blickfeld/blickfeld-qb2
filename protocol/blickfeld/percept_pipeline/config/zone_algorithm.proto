// Copyright (c) 2022 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/geometry/shape.proto";
import "blickfeld/base/options.proto";
import "blickfeld/percept_pipeline/config/object_size.proto";
import "google/protobuf/struct.proto";
package blickfeld.percept_pipeline.config;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// An algorithm that monitors the area within and around a zone.
message ZoneAlgorithm {
  // Algorithm that measure the volume of a zone
  // The volume of a zone is approximated by computing a 'volume map' from the input point clouds. The volume map discretize the zone
  // into 'tiles' in the xy-plane with a side-length of 'resolution'. Each tile contains the height information about the points that
  // fall into this tile. The volume of the volume map can be calculated by adding up the volumes of the tiles in the volume map.
  message Volume {
    // Grid resolution per tile used to measure the volume.
    // Reasonable default: 0.1
    float resolution = 1 [(.blickfeld.base.d_min) = 0.1, (.blickfeld.base.d_max) = 0.5, (.blickfeld.base.unit) = "m"];
    // The measured volume while area covered by the zone is considered 'empty'. The value can be set using
    // TareVolume method while the area of the zone is empty.
    // Reasonable default: 0
    float empty_volume = 2 [(.blickfeld.base.unit) = "m^3"];
  }
  // Algorithm that triggers an alarm if movement was detected in the zone
  message Security {
    // Minimum number of (foreground) points in the security zone to trigger the alarm.
    // Reasonable default: 10
    uint32 min_points = 1;
    // Maximum number of (foreground) points in the security zone that still triggers an alarm.
    // More points will disable the alarm. This logic can be disabled by setting max_points to '0'.
    // Default: 0
    uint32 max_points = 2;
  }
  // Algorithm that triggers an alarm when an object of one of the selected sizes is in the zone
  message ObjectBasedSecurity {
    // Selection of sizes which trigger an alarm. Each size in the array will only
    // trigger an alarm for the interval of that size.
    repeated .blickfeld.percept_pipeline.config.ObjectSize alarm_sizes = 1;
  }
  // Algorithm that excludes points from the input point cloud
  message Exclusion {
  }
  // The user readable zone algorithm name
  string name = 1;
  // The uuid of the zone algorithm (uuid4)
  string uuid = 2;
  // Geometric shape (usually a Box) in which the algorithm detects certain behaviors/scenarios
  .blickfeld.base.geometry.Shape shape = 3;
  // Arbitrary metadata storage for client applications
  .google.protobuf.Struct metadata = 100 [(.blickfeld.base.optional) = true];
  oneof algorithm_type {
    // Run volume monitoring within the zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.Volume volume = 9;
    // Run alarm detection within the zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.Security security = 7;
    // Run exclusion zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.Exclusion exclusion = 10;
    // Run object-based alarm detection within the zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.ObjectBasedSecurity object_based_security = 11;
  }
  reserved 4, 5, 6, 8;
}

