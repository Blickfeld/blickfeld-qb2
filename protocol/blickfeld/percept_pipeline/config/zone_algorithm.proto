// Copyright (c) 2022 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/config/geolocation.proto";
import "blickfeld/base/geometry/shape.proto";
import "blickfeld/base/geometry/vector3.proto";
import "blickfeld/base/options.proto";
import "blickfeld/percept_pipeline/config/object_size.proto";
import "google/protobuf/struct.proto";
package blickfeld.percept_pipeline.config;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// An algorithm that monitors the area within and around a zone.
message ZoneAlgorithm {
  // The geolocation of the zone based on the map and the zone position.
  message Geolocation {
    // The geolocation of the center of the zone.
    .blickfeld.base.config.Geolocation center = 1;
    // The geolocation of the corners of the zone.
    repeated .blickfeld.base.config.Geolocation corners = 2;
  }
  // Algorithm that measure the volume of a zone
  //  
  // The volume of a zone is approximated by computing a 'volume map' from the input point clouds. The volume map discretizes the zone
  // into 'tiles' in the xy-plane with a side-length of 'resolution'. Each tile contains the height information about the points that
  // fall into this tile. The volume of the volume map can be calculated by adding up the volumes of the tiles in the volume map.
  message Volume {
    // Grid resolution per tile used to measure the volume.
    //  
    // Reasonable default: 0.1
    float resolution = 1 [(.blickfeld.base.d_min) = 0.1, (.blickfeld.base.d_max) = 0.5, (.blickfeld.base.unit) = "m"];
    // The measured volume while area covered by the zone is considered 'empty'. The value can be set using
    // TareVolume method while the area of the zone is empty.
    //  
    // Reasonable default: 0
    float empty_volume = 2 [(.blickfeld.base.unit) = "m^3"];
    // Link volume zone to occupancy zones (by uuid).
    //  
    // Disables the volume zone state when one of the occupancy zones is occupied.
    repeated string disable_when_occupied_zone_uuids = 4 [(.blickfeld.base.optional) = true];
    // Angle of repose.
    //  
    // Steepest angle of descent when the measured material is piled.
    // See https://en.wikipedia.org/wiki/Angle_of_repose.
    float angle_of_repose = 5 [(.blickfeld.base.optional) = true, (.blickfeld.base.unit) = "rad"];
    // Minimum coverage value for zone.
    //  
    // When the estimated coverage is below the configured threshold,
    // the state output will be disabled.
    //  
    // This can be used to automatically disable zones when the viewport to the
    // zone area is blocked or the sensor is temporarily failed.
    //  
    // Default: 0
    float minimum_coverage = 6 [(.blickfeld.base.optional) = true];
    reserved 3;
  }
  // Algorithm that triggers an alarm if movement was detected in the zone
  message Security {
    // Minimum number of (foreground) points in the security zone to trigger the alarm.
    // Reasonable default: 10
    uint32 min_points = 1;
    // Maximum number of (foreground) points in the security zone that still triggers an alarm.
    // More points will disable the alarm. This logic can be disabled by setting max_points to '0'.
    // Default: 0
    uint32 max_points = 2;
    // Minimum active intrusion duration before alarm is triggered.
    //  
    // Default: 0
    float minimum_intruding_duration = 3 [(.blickfeld.base.unit) = "s"];
    // Minimum intrusion confidence before alarm is triggered.
    //  
    // Only applicable when the minimum intruding duration is configured.
    //  
    // Default: 1
    float minimum_intrusion_confidence = 4;
    // Alarm is kept active for the given duration to reduce jitter.
    //  
    // Default: 0
    float hold_duration = 5 [(.blickfeld.base.unit) = "s"];
    // Link security zone to occupancy zones (by uuid).
    //  
    // Disables the security zone state and alarms when one of the occupancy zones is occupied.
    repeated string disable_when_occupied_zone_uuids = 6 [(.blickfeld.base.optional) = true];
  }
  // Algorithm that triggers an alarm when an object of one of the selected sizes is in the zone
  message ObjectBasedSecurity {
    // Selection of sizes which trigger an alarm. Each size in the array will only
    // trigger an alarm for the interval of that size.
    repeated .blickfeld.percept_pipeline.config.ObjectSize alarm_sizes = 1;
    // Minimum lifetime of object before alarm is triggered.
    //  
    // Default: 0
    float minimum_intruder_lifetime = 6 [(.blickfeld.base.unit) = "s"];
    // Minimum track length of object before alarm is triggered.
    //  
    // Default: 0
    float minimum_intruder_track_length = 7 [(.blickfeld.base.unit) = "m"];
    // Minimum active intrusion duration before alarm is triggered.
    //  
    // Default: 0
    float minimum_intruding_duration = 8 [(.blickfeld.base.unit) = "s"];
    // Trigger alarm for objects with the "in_background" property.
    //  
    // Enabling this might increase the false alarm rate.
    bool objects_in_background = 4;
    // Minimum intrusion confidence before alarm is triggered.
    //  
    // Only applicable when the minimum intruding duration is configured.
    //  
    // Default: 1
    float minimum_intrusion_confidence = 9;
    // Alarm is kept active for the given duration to reduce jitter.
    //  
    // Default: 0
    float hold_duration = 10 [(.blickfeld.base.unit) = "s"];
    // Detect an object as intruder if any part of it enters the zone.
    // Only the center point of the object is considered when disabled.
    //  
    // Enabling this might increase the false alarm rate.
    bool intrusion_on_partial_entry = 11;
    // Link security zone to occupancy zones (by uuid).
    //  
    // Disables the security zone state and alarms when one of the occupancy zones is occupied.
    repeated string disable_when_occupied_zone_uuids = 12 [(.blickfeld.base.optional) = true];
    // Detect an object as intruder if it is moving in the wrong direction, similar to the directional zone,
    // but covering an area.
    bool intrusion_on_wrong_direction = 13;
    // Minimum velocity an intruder has to have to trigger an intrusion on wrong direction. Prevents standing objects or persons from
    // triggering a false alarm.
    //  
    // Only applicable if intrusion on wrong direction is enabled.
    //  
    // Default: 0.028 (equals 0.1 km/h)
    float minimum_intruder_velocity = 14 [(.blickfeld.base.unit) = "m/s"];
    // Minimum average intensity an intruder has to have to trigger an intrusion.
    //  
    // This allows filtering false alarms when they have a significantly different intensity level than real objects.
    //  
    // Default: 0 (all average intensity values are considered)
    float minimum_average_intruder_intensity = 15 [(.blickfeld.base.optional) = true];
    reserved 2, 3, 5;
  }
  // Algorithm that excludes points from the input point cloud
  message Exclusion {
  }
  // Algorithm that detects if a zone is occupied
  message Occupancy {
    // Minimum number of points to mark the zone as occupied.
    //  
    // Reasonable default: 10
    uint32 min_points = 1;
    // If set, the min_points is not compared against zero but against an
    // adaptive baseline. The baseline is calculated with an exponential
    // filter with the zone point count as input.
    //  
    // The given time constant is used to calculate the alpha for the exponential
    // filter. After a restart, the baseline is initialized with the current zone
    // point count.
    //  
    // Reasonable default: 3600s (1 hour)
    float adaptive_baseline_time_constant = 2 [(.blickfeld.base.optional) = true, (.blickfeld.base.unit) = "s"];
    // The point cloud inside the zone is down sampled with a voxel grid.
    // This is done to achieve a distance-independent parametrization.
    // The size of a voxel cell can be configured with this parameter.
    //  
    // Default: 0.05m
    float voxel_size = 3 [(.blickfeld.base.optional) = true, (.blickfeld.base.unit) = "m"];
    // Invert the state of the zone
    //  
    // This might be useful in situations where e.g. a static crane should be detected in its home position.
    bool invert = 4;
  }
  // Algorithm that detects if objects are traversing through the zone.
  message TraversalSecurity {
    // Selection of sizes which trigger an alarm.  An alarm will only be triggered by objects of sizes
    // specified in the array.
    repeated .blickfeld.percept_pipeline.config.ObjectSize alarm_sizes = 1;
    // Alarm is kept active for the given duration to reduce jitter.
    //  
    // Default: 0
    float hold_duration = 2 [(.blickfeld.base.unit) = "s"];
    // Link security zone to occupancy zones (by uuid).
    //  
    // Disables the security zone state and alarms when one of the occupancy zones is occupied.
    repeated string disable_when_occupied_zone_uuids = 3 [(.blickfeld.base.optional) = true];
  }
  // Algorithm that monitors traffic moving through the zone.
  message TrafficLane {
    // Expected velocity of the objects inside the traffic zone.
    float expected_velocity = 1 [(.blickfeld.base.unit) = "m/s"];
  }
  // The user readable zone algorithm name
  string name = 1;
  // The uuid of the zone algorithm (uuid4)
  string uuid = 2;
  // Geometric shape (usually a Box) in which the algorithm detects certain behaviors/scenarios
  .blickfeld.base.geometry.Shape shape = 3;
  // Disable this zone, setting this flag to `true` disables the evaluation of the zone
  bool disabled = 13;
  // Geolocation of the zone.
  //  
  // This field is read only and only set when the geolocation is configured in the data source.
  .blickfeld.percept_pipeline.config.ZoneAlgorithm.Geolocation geolocation = 15 [(.blickfeld.base.optional) = true];
  // Arbitrary metadata storage for client applications
  .google.protobuf.Struct metadata = 100 [(.blickfeld.base.optional) = true];
  oneof algorithm_type {
    // Run volume monitoring within the zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.Volume volume = 9;
    // Run alarm detection within the zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.Security security = 7;
    // Run exclusion zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.Exclusion exclusion = 10;
    // Run object-based alarm detection within the zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.ObjectBasedSecurity object_based_security = 11;
    // Run occupancy zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.Occupancy occupancy = 12;
    // Run traversal zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.TraversalSecurity traversal_security = 14;
    // Run traffic monitoring within the zone
    .blickfeld.percept_pipeline.config.ZoneAlgorithm.TrafficLane traffic_lane = 16;
  }
  reserved 4, 5, 6, 8;
}

