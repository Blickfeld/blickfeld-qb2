// Copyright (c) 2024 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/geometry/pose.proto";
import "blickfeld/base/geometry/shape.proto";
import "blickfeld/base/geometry/vector3.proto";
import "blickfeld/base/options.proto";
import "blickfeld/core_processing/data/frame.proto";
import "blickfeld/percept_pipeline/config/object_size.proto";
import "blickfeld/percept_processing/data/flag.proto";
package blickfeld.percept_processing.data;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// A message representing exactly one object that is detected in the scene.
message DetectedObject {
  // Properties of an object.
  message Properties {
    // The size of an object.
    .blickfeld.percept_pipeline.config.ObjectSize size = 1;
    // / Number of measurements that belong to the object point cloud.
    uint32 num_points = 2;
    // / Average intensity of the measurements from the object point cloud.
    uint32 average_intensity = 3;
    // Surface area of the largest xz / yz bounding box plane.
    // This is used for the simple object size classifaction.
    float bounding_box_2d_surface = 4;
    // Confidence value
    // 
    // Value in the range of [0, 1] which indicates how confident
    // the tracking algorithm is about the detected object.
    // 
    // NOTE: This is preliminary implementation and might change its behaviour significantly in upcoming releases.
    float confidence = 5 [(.blickfeld.base.optional) = true];
    // Set when bounding box of object is mostly located within the background / reference frame.
    // This is usually an indication for ground or vegetation detections.
    bool in_background = 6;
    // The estimated track length of an object.
    float track_length = 7 [(.blickfeld.base.unit) = "m"];
  }
  // The position and orientation of the object.
  .blickfeld.base.geometry.Pose pose = 1;
  // The shape representing the object (bounding box).
  .blickfeld.base.geometry.Shape shape = 2;
  // Properties of the object.
  .blickfeld.percept_processing.data.DetectedObject.Properties properties = 3;
  // The point cloud of the object.
  .blickfeld.core_processing.data.Frame point_cloud = 4;
  // The timestamps when the object is detected for the first time
  uint64 timestamp = 5 [(.blickfeld.base.unit) = "ns"];
  // Lifetime of the object
  uint64 lifetime = 11 [(.blickfeld.base.unit) = "ns"];
  // The tracked path of the object.
  repeated .blickfeld.base.geometry.Pose path = 6;
  // List of sensors which currently detect the object
  repeated string visible_to_sensors = 7;
  // Active when object is currently detected as intruder in a security zone
  .blickfeld.percept_processing.data.Flag intruding = 8;
  // Set when object intruded once in a security zone
  .blickfeld.percept_processing.data.Flag intruder = 9;
  // Track object velocity
  .blickfeld.base.geometry.Vector3 velocity = 13;
}

