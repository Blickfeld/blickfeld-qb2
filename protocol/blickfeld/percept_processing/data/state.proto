// Copyright (c) 2023 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/core_processing/data/frame.proto";
import "blickfeld/percept_processing/data/detected_object.proto";
import "blickfeld/percept_processing/data/flag.proto";
package blickfeld.percept_processing.data;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// A state transmits high-level information about the scene or setup. The
// information it contains depends on the configuration.
// States will get calculated on every frame of measurement.
message State {
  // A message containing an alarm state of a zone.
  message ObjectBasedSecurity {
    // If there is an alarm or not in the zone.
    bool alarm = 1;
    // Map of objects where the key is the UUID of the object that triggered the alarm.
    map<string, .blickfeld.percept_processing.data.DetectedObject> objects = 2;
    // Active intrusion. Can be used as pre-alarm.
    .blickfeld.percept_processing.data.Flag intrusion = 3;
    // Confidence that it is a real intrusion.
    // 
    // Calculates a moving average of the intrusion state.
    // The moving average window size can be configured with
    // the minimum intruding duration parameter.
    float intrusion_confidence = 4;
  }
  // A message containing an alarm state of a zone.
  message Security {
    // If there is an alarm or not in the zone.
    bool alarm = 1;
    // The current number of lidar points detected in the zone.
    uint32 num_detected_points = 2;
    // Foreground point cloud inside zone which triggered the alarm.
    .blickfeld.core_processing.data.Frame point_cloud = 3;
    // Active intrusion. Can be used as pre-alarm.
    .blickfeld.percept_processing.data.Flag intrusion = 4;
    // Confidence that it is a real intrusion.
    // 
    // Calculates a moving average of the intrusion state.
    // The moving average window size can be configured with
    // the minimum intruding duration parameter.
    float intrusion_confidence = 5;
  }
  // A message containing the volume state of a zone.
  // This is based on one volume zone.
  message Volume {
    // The current numerical volume of the zone.
    float volume = 1 [(.blickfeld.base.unit) = "m^3"];
    // The current zone volume surface coverage
    float coverage = 5 [(.blickfeld.base.d_min) = 0, (.blickfeld.base.d_max) = 1];
    reserved 2, 3, 4;
  }
  // A message containing the occupancy state of a zone.
  message Occupancy {
    // True if the zone is occupied.
    bool occupied = 1;
    // The current number of lidar points detected in the zone.
    uint32 num_detected_points = 2;
    // Current baseline.
    float baseline = 3;
  }
  // A message containing the traversal state of a zone.
  message TraversalSecurity {
    // The traversal alarm
    bool alarm = 1;
    // The objects which triggered the inbound alarm
    map<string, .blickfeld.percept_processing.data.DetectedObject> objects = 2;
    // Active traversal
    .blickfeld.percept_processing.data.Flag intrusion = 3;
  }
  // The name of the entity generating this state
  string generator_name = 8;
  oneof state_type {
    // The security state contains intrusion information of a zone
    .blickfeld.percept_processing.data.State.Security security = 5;
    // Current volume measured in the selected zone
    .blickfeld.percept_processing.data.State.Volume volume = 7;
    // The object based security state contains intrusion information of a zone and the objects that trigger the intrusion
    .blickfeld.percept_processing.data.State.ObjectBasedSecurity object_based_security = 9;
    // The state contains occupation information of a zone
    .blickfeld.percept_processing.data.State.Occupancy occupancy = 10;
    // The traversal state
    .blickfeld.percept_processing.data.State.TraversalSecurity traversal_security = 11;
  }
  reserved 1, 2, 3, 4, 6;
}

