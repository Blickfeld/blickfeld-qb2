// Copyright (c) 2024 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/percept_processing/data/event.proto";
package blickfeld.percept_processing.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// Request for stream method
message EventStreamRequest {
  // Identifier from which the stream should start.
  string id = 1 [(.blickfeld.base.optional) = true];
}

// Response to stream method
message EventStreamResponse {
  // Unique identifier of event.
  // The ID has the format: $timestamp-$revision.
  // $timestamp is a monotonic counter in seconds.
  // $revision is usually 0 but incremented when there a multiple events per second.
  string id = 1;
  // Event payload.
  .blickfeld.percept_processing.data.Event event = 2;
}

// Service for actionable events
service Event {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_AUTHORIZED
  };
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_EXPERIMENTAL
  };
  // A method to get a stream of events.
  rpc Stream(.blickfeld.percept_processing.services.EventStreamRequest) returns (stream .blickfeld.percept_processing.services.EventStreamResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
}

