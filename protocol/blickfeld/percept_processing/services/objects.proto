// Copyright (c) 2024 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/percept_processing/data/objects.proto";
package blickfeld.percept_processing.services;

option cc_enable_arenas = true;
option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// Request message for objects stream
message ObjectsStreamRequest {
  // Fetch object list without tracking
  bool untracked = 1 [(.blickfeld.base.optional) = true];
}

// A response for getting a stream of objects messages from the running
// pipeline
message ObjectsStreamResponse {
  // The current objects detected in the scene.
  .blickfeld.percept_processing.data.Objects objects = 1;
}

// An RPC service to request a stream of objects messages. If a pipeline is
// already running, it will be used to stream the data. If no pipeline is
// running, it will be started first and then the stream will start. NOTE: in
// this second case, the pipeline will also be automatically stopped once
// there are no more clients requesting any stream type from the module.
service Objects {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_AUTHORIZED
  };
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_MAINTAINED
  };
  // A method to get a stream of objects messages from the pipeline
  rpc Stream(.blickfeld.percept_processing.services.ObjectsStreamRequest) returns (stream .blickfeld.percept_processing.services.ObjectsStreamResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
}

