// Copyright (c) 2023 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/percept_processing/data/data_type.proto";
import "google/protobuf/empty.proto";
package blickfeld.percept_processing.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// A request to start a headless pipeline.
message PipelineStartRequest {
  reserved 1;
}

// A response to PipelineStartRequest that contains the list of available
// streams for the started pipeline.
message PipelineStartResponse {
  // List of available streams
  repeated .blickfeld.percept_processing.data.DataType data_types = 1;
}

// A response containing the list of the data types available for streaming in
// the running pipeline
message PipelineListAvailableDataResponse {
  // A list of the data types available for streaming
  repeated .blickfeld.percept_processing.data.DataType data_types = 1;
}

// An RPC service to start and stop pipelines. Note that currently it is
// impossible to run more than one pipeline at the same time.
service Pipeline {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_AUTHORIZED
  };
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_EXPERIMENTAL
  };
  // A method to start a headless pipeline.
  // This means that a pipeline started with this method will only be stopped
  // once the Stop method is explicitly called
  rpc Start(.blickfeld.percept_processing.services.PipelineStartRequest) returns (.blickfeld.percept_processing.services.PipelineStartResponse);
  // A method to stop the running pipeline. This will force-stop the pipeline,
  // no matter how the pipeline was created and no matter how many clients are
  // streaming from it.
  rpc Stop(.google.protobuf.Empty) returns (.google.protobuf.Empty);
  // A method to get the list of the data streams available for the running
  // pipeline
  rpc ListAvailableData(.google.protobuf.Empty) returns (.blickfeld.percept_processing.services.PipelineListAvailableDataResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
}

