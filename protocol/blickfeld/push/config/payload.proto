// Copyright (c) 2023 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/options.proto";
package blickfeld.push.config;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// defines what type of data stream to use as payload
message Payload {
  // define how the messages are serialized
  enum Encoding {
    // unspecified
    ENCODING_UNSPECIFIED = 0;
    // protobuf serialized as binary
    ENCODING_PROTOBUF = 1;
    // json representation of protobuf messages
    ENCODING_JSON = 2;
    // flattened json representation of protobuf messages
    ENCODING_JSON_FLATTENED = 3;
  }
  // The type of data that the stream contains
  enum DataType {
    // The zero value should not be used
    DATA_TYPE_UNSPECIFIED = 0;
    // Health data type: this contains information about the health of the
    // pipeline and of the module
    DATA_TYPE_HEALTH = 1;
    // Point cloud data type: a complete point cloud message is streamed
    DATA_TYPE_POINT_CLOUD = 2;
    // States data type: a map of states generated by the system as configured
    // in the pipeline
    DATA_TYPE_STATES = 5;
    // Volume map data type: a volume map generated by one volume zone configured in the pipeline
    DATA_TYPE_VOLUME_MAP = 6;
    // Objects data type: a map of objects detected by the system
    DATA_TYPE_OBJECTS = 7;
    // Event data type: a message is emitted for each event
    DATA_TYPE_EVENT = 8;
    reserved 3, 4;
  }
  // payload encoding
  .blickfeld.push.config.Payload.Encoding encoding = 1;
  // payload data type to stream
  .blickfeld.push.config.Payload.DataType data_type = 3;
}

