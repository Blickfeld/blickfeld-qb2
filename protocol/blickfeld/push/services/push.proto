// Copyright (c) 2023 Blickfeld GmbH.
// All rights reserved.
syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/push/config/push.proto";
import "google/protobuf/empty.proto";
package blickfeld.push.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_AUTHORIZED
};

// request to add a push configuration
message PushStoreRequest {
  // the uuid of the configuration (has to be generated on client side!)
  string uuid = 1;
  // push configuration to add
  .blickfeld.push.config.Push push_config = 2;
}

// request to delete a push configuration
message PushDeleteRequest {
  // configuration uuid to delete
  string uuid = 1;
}

// request to list all configured push configurations
message PushListResponse {
  // current snapshot of configured push configurations
  map<string, .blickfeld.push.config.Push> push_configs = 1;
}

// request to watch all configured push configurations
message PushWatchResponse {
  // current snapshot of configured push configurations
  map<string, .blickfeld.push.config.Push> push_configs = 1;
}

// request to enable the push configuration with the given uuid
message PushEnableRequest {
  // configuration uuid to enable
  string uuid = 1;
}

// request to disable the push configuration with the given uuid
message PushDisableRequest {
  // configuration uuid to disable
  string uuid = 1;
}

// An gRPC service to configure multiple push settings
service Push {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_AUTHORIZED
  };
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_MAINTAINED
  };
  // Store (Add or Update a push configuration)
  rpc Store(.blickfeld.push.services.PushStoreRequest) returns (.google.protobuf.Empty);
  // Delete an existing push configuration
  rpc Delete(.blickfeld.push.services.PushDeleteRequest) returns (.google.protobuf.Empty);
  // List configured push configuration
  rpc List(.google.protobuf.Empty) returns (.blickfeld.push.services.PushListResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
  // Watch list of configured push configuration
  rpc Watch(.google.protobuf.Empty) returns (stream .blickfeld.push.services.PushWatchResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
  // Enable a configured Push
  rpc Enable(.blickfeld.push.services.PushEnableRequest) returns (.google.protobuf.Empty);
  // Disable a configured Push
  rpc Disable(.blickfeld.push.services.PushDisableRequest) returns (.google.protobuf.Empty);
}

