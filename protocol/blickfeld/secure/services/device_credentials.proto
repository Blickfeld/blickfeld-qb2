syntax = "proto3";

import "blickfeld/base/options.proto";
import "blickfeld/secure/config/certificate.proto";
import "blickfeld/secure/config/device_credentials.proto";
import "google/protobuf/empty.proto";
package blickfeld.secure.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_PUBLIC
};

// Request with device credentials
//  
// The device credentials should only be set once in production.
message DeviceCredentialsSetFactoryRequest {
  // Cryptographic device credentials which were generated by the blickfeld-secure-authority.
  .blickfeld.secure.config.DeviceCredentials device_credentials = 1;
}

// Request with device credentials
message DeviceCredentialsSetRequest {
  // Cryptographic device credentials used to establish secured TLS connection between client and Qb2 device.
  .blickfeld.secure.config.DeviceCredentials device_credentials = 1;
}

// Response with device credentials
message DeviceCredentialsGetResponse {
  // Cryptographic device credentials used to establish secured TLS connection between client and Qb2 device.
  .blickfeld.secure.config.DeviceCredentials device_credentials = 1;
}

// Response message which delivers public device certificate
message DeviceCredentialsGetCertificatesResponse {
  // Certificate chain which is deployed at Qb2 device and is used during the TLS handshake.
  repeated .blickfeld.secure.config.Certificate certificates = 1;
}

// Set device credentials for the secure TLS connection of the Qb2 device.
service DeviceCredentials {
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_EXPERIMENTAL
  };
  // Set device credentials.
  //  
  // [WARN]
  // This will override the factory SSL certificate which is provided by the device.
  // It will cause problems with inter-device communication, authentication, and Blickfeld client libraries.
  // Blickfeld client libraries expect a root certificate which is signed by the Blickfeld device root authority.
  // The expected root certificate must then be manually provided via configuration options in the client libraries.
  rpc Set(.blickfeld.secure.services.DeviceCredentialsSetRequest) returns (.google.protobuf.Empty) {
    option (.blickfeld.base.access_control_method) = {
      level: LEVEL_ADMIN
    };
    option (.blickfeld.base.protocol_maturity_method) = {
      level: LEVEL_EXPERIMENTAL
    };
  }
  // 
  // Get device credentials certificates.
  rpc GetCertificates(.google.protobuf.Empty) returns (.blickfeld.secure.services.DeviceCredentialsGetCertificatesResponse) {
    option (.blickfeld.base.access_control_method) = {
      level: LEVEL_PUBLIC
      read_only: true
    };
  }
  // 
  // Clear device credentials.
  // The device credentials will reset to the factory device credentials.
  rpc Clear(.google.protobuf.Empty) returns (.google.protobuf.Empty) {
    option (.blickfeld.base.access_control_method) = {
      level: LEVEL_ADMIN
    };
    option (.blickfeld.base.protocol_maturity_method) = {
      level: LEVEL_EXPERIMENTAL
    };
  }
  // 
}

