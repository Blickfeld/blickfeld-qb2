syntax = "proto3";

import "blickfeld/base/options.proto";
import "google/protobuf/empty.proto";
package blickfeld.secure.services;

option (.blickfeld.base.access_control_file) = {
  level: LEVEL_PUBLIC
};

// Response for GetNonce request.
message SessionGetNonceResponse {
  // Cryptographic session nonce.
  string nonce = 1;
}

// Session service which implements all methods for session-bound security features.
// A session is recreated after the following events:
// * Power-cycle of the device
// * Every day (UTC)
// * Manual invalidation via gRPC call
service Session {
  option (.blickfeld.base.access_control_service) = {
    level: LEVEL_PUBLIC
  };
  option (.blickfeld.base.protocol_maturity_service) = {
    level: LEVEL_MAINTAINED
  };
  // Get cryptographic session nonce.
  rpc GetNonce(.google.protobuf.Empty) returns (.blickfeld.secure.services.SessionGetNonceResponse) {
    option (.blickfeld.base.access_control_method) = {
      read_only: true
    };
  }
  // Invalidates the current session.
  // A new session will be created automatically.
  rpc Invalidate(.google.protobuf.Empty) returns (.google.protobuf.Empty) {
    option (.blickfeld.base.access_control_method) = {
      level: LEVEL_ADMIN
    };
  }
}

